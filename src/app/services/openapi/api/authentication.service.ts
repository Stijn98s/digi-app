/**
 * Digicatch
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AppSignUpDto } from '../model/appSignUpDto';
import { JWTDto } from '../model/jWTDto';
import { NewPlayerDto } from '../model/newPlayerDto';
import { SignInDto } from '../model/signInDto';
import { SignUpDto } from '../model/signUpDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class AuthenticationApiClient {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param signInDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public authApplocalPost(signInDto: SignInDto, observe?: 'body', reportProgress?: boolean): Observable<JWTDto>;
    public authApplocalPost(signInDto: SignInDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<JWTDto>>;
    public authApplocalPost(signInDto: SignInDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<JWTDto>>;
    public authApplocalPost(signInDto: SignInDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (signInDto === null || signInDto === undefined) {
            throw new Error('Required parameter signInDto was null or undefined when calling authApplocalPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<JWTDto>(`${this.configuration.basePath}/auth/applocal`,
            signInDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param appSignUpDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public authAppsignupPost(appSignUpDto: AppSignUpDto, observe?: 'body', reportProgress?: boolean): Observable<NewPlayerDto>;
    public authAppsignupPost(appSignUpDto: AppSignUpDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NewPlayerDto>>;
    public authAppsignupPost(appSignUpDto: AppSignUpDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NewPlayerDto>>;
    public authAppsignupPost(appSignUpDto: AppSignUpDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (appSignUpDto === null || appSignUpDto === undefined) {
            throw new Error('Required parameter appSignUpDto was null or undefined when calling authAppsignupPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<NewPlayerDto>(`${this.configuration.basePath}/auth/appsignup`,
            appSignUpDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param signUpDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public authLocalPost(signUpDto: SignUpDto, observe?: 'body', reportProgress?: boolean): Observable<JWTDto>;
    public authLocalPost(signUpDto: SignUpDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<JWTDto>>;
    public authLocalPost(signUpDto: SignUpDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<JWTDto>>;
    public authLocalPost(signUpDto: SignUpDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (signUpDto === null || signUpDto === undefined) {
            throw new Error('Required parameter signUpDto was null or undefined when calling authLocalPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<JWTDto>(`${this.configuration.basePath}/auth/local`,
            signUpDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public authProtectedGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public authProtectedGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public authProtectedGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public authProtectedGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            const header = this.configuration.apiKeys["Authorization"];
            const headerString = typeof header  === 'function'
                ? header() : header;
            headers = headers.set('Authorization', headerString);
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.configuration.basePath}/auth/protected`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
